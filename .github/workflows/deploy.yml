name: Build and upload

# Build on every branch push, tag push, and pull request change:
# on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm ci  # install from package-lock.json (without modifying it)
      - run: npm run build

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - run: git status

      - name: Build sdist
        run: python setup.py sdist

      - name: Install Python part to build static gh-pages page
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install -e "."
      - name: Print environment
        run: |
          python -m pip freeze
          python --version
          python -c "import openpifpaf; print(openpifpaf.__version__)"
          python -c "import openpifpafwebdemo; print(openpifpafwebdemo.__version__)"

      - name: Build gh-pages
        run: python -m openpifpafwebdemo.server --write-static-page=gh-pages --google-analytics=UA-137290484-1 --resolution=0.2

      - uses: actions/upload-artifact@v2
        with:
          path: |
            dist/*.tar.gz
            gh-pages

  create_docker:
    needs: [build_sdist]
    name: Build and publish docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
      - run: cp dist/openpifpafwebdemo-*.tar.gz dist/openpifpafwebdemo-latest.tar.gz
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: svenkreiss/openpifpafwebdemo
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  upload_pypi:
    needs: [build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          # To test: repository_url: https://test.pypi.org/legacy/

  upload_ghpages:
    needs: [build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: gh-pages

      - name: GitHub Pages action
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          force_orphan: true
